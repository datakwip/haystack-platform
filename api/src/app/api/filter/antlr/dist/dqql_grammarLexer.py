# Generated from dqql_grammar.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,271,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,
        0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,
        7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,
        1,12,1,13,1,13,1,13,1,13,1,13,1,13,3,13,118,8,13,1,14,1,14,1,14,
        1,14,3,14,124,8,14,1,15,1,15,1,15,1,15,1,15,1,15,3,15,132,8,15,1,
        16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,143,8,16,1,17,1,
        17,4,17,147,8,17,11,17,12,17,148,1,18,1,18,1,18,1,18,5,18,155,8,
        18,10,18,12,18,158,9,18,1,18,1,18,1,19,1,19,5,19,164,8,19,10,19,
        12,19,167,9,19,1,19,1,19,1,20,1,20,5,20,173,8,20,10,20,12,20,176,
        9,20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,
        1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,5,24,199,8,24,10,24,
        12,24,202,9,24,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,
        1,29,3,29,215,8,29,1,29,1,29,3,29,219,8,29,1,29,3,29,222,8,29,1,
        29,1,29,1,29,1,29,1,29,3,29,229,8,29,1,30,1,30,1,30,5,30,234,8,30,
        10,30,12,30,237,9,30,1,31,1,31,1,32,1,32,3,32,243,8,32,1,33,1,33,
        1,33,1,33,3,33,249,8,33,1,34,5,34,252,8,34,10,34,12,34,255,9,34,
        1,35,1,35,3,35,259,8,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,
        1,38,1,38,1,38,0,0,39,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,55,0,57,0,59,0,61,0,63,0,
        65,0,67,0,69,0,71,0,73,0,75,0,77,0,1,0,8,1,0,34,34,2,0,39,39,92,
        92,3,0,9,11,13,13,32,32,1,0,97,122,1,0,65,90,1,0,48,57,3,0,45,46,
        59,59,126,126,3,0,36,37,47,47,95,95,285,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,1,
        79,1,0,0,0,3,81,1,0,0,0,5,83,1,0,0,0,7,85,1,0,0,0,9,87,1,0,0,0,11,
        89,1,0,0,0,13,92,1,0,0,0,15,95,1,0,0,0,17,97,1,0,0,0,19,99,1,0,0,
        0,21,102,1,0,0,0,23,105,1,0,0,0,25,108,1,0,0,0,27,117,1,0,0,0,29,
        123,1,0,0,0,31,131,1,0,0,0,33,142,1,0,0,0,35,144,1,0,0,0,37,150,
        1,0,0,0,39,161,1,0,0,0,41,170,1,0,0,0,43,179,1,0,0,0,45,181,1,0,
        0,0,47,187,1,0,0,0,49,193,1,0,0,0,51,203,1,0,0,0,53,205,1,0,0,0,
        55,209,1,0,0,0,57,211,1,0,0,0,59,214,1,0,0,0,61,230,1,0,0,0,63,238,
        1,0,0,0,65,242,1,0,0,0,67,248,1,0,0,0,69,253,1,0,0,0,71,258,1,0,
        0,0,73,260,1,0,0,0,75,265,1,0,0,0,77,268,1,0,0,0,79,80,5,46,0,0,
        80,2,1,0,0,0,81,82,5,95,0,0,82,4,1,0,0,0,83,84,5,45,0,0,84,6,1,0,
        0,0,85,86,5,40,0,0,86,8,1,0,0,0,87,88,5,41,0,0,88,10,1,0,0,0,89,
        90,5,61,0,0,90,91,5,61,0,0,91,12,1,0,0,0,92,93,5,73,0,0,93,94,5,
        78,0,0,94,14,1,0,0,0,95,96,5,60,0,0,96,16,1,0,0,0,97,98,5,62,0,0,
        98,18,1,0,0,0,99,100,5,60,0,0,100,101,5,61,0,0,101,20,1,0,0,0,102,
        103,5,62,0,0,103,104,5,61,0,0,104,22,1,0,0,0,105,106,5,33,0,0,106,
        107,5,61,0,0,107,24,1,0,0,0,108,109,5,45,0,0,109,110,5,62,0,0,110,
        26,1,0,0,0,111,112,5,65,0,0,112,113,5,78,0,0,113,118,5,68,0,0,114,
        115,5,97,0,0,115,116,5,110,0,0,116,118,5,100,0,0,117,111,1,0,0,0,
        117,114,1,0,0,0,118,28,1,0,0,0,119,120,5,79,0,0,120,124,5,82,0,0,
        121,122,5,111,0,0,122,124,5,114,0,0,123,119,1,0,0,0,123,121,1,0,
        0,0,124,30,1,0,0,0,125,126,5,78,0,0,126,127,5,79,0,0,127,132,5,84,
        0,0,128,129,5,110,0,0,129,130,5,111,0,0,130,132,5,116,0,0,131,125,
        1,0,0,0,131,128,1,0,0,0,132,32,1,0,0,0,133,134,5,84,0,0,134,135,
        5,82,0,0,135,136,5,85,0,0,136,143,5,69,0,0,137,138,5,70,0,0,138,
        139,5,65,0,0,139,140,5,76,0,0,140,141,5,83,0,0,141,143,5,69,0,0,
        142,133,1,0,0,0,142,137,1,0,0,0,143,34,1,0,0,0,144,146,5,64,0,0,
        145,147,3,67,33,0,146,145,1,0,0,0,147,148,1,0,0,0,148,146,1,0,0,
        0,148,149,1,0,0,0,149,36,1,0,0,0,150,156,5,34,0,0,151,155,8,0,0,
        0,152,153,5,92,0,0,153,155,5,34,0,0,154,151,1,0,0,0,154,152,1,0,
        0,0,155,158,1,0,0,0,156,154,1,0,0,0,156,157,1,0,0,0,157,159,1,0,
        0,0,158,156,1,0,0,0,159,160,5,34,0,0,160,38,1,0,0,0,161,165,5,39,
        0,0,162,164,8,1,0,0,163,162,1,0,0,0,164,167,1,0,0,0,165,163,1,0,
        0,0,165,166,1,0,0,0,166,168,1,0,0,0,167,165,1,0,0,0,168,169,5,39,
        0,0,169,40,1,0,0,0,170,174,5,96,0,0,171,173,3,65,32,0,172,171,1,
        0,0,0,173,176,1,0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,177,1,
        0,0,0,176,174,1,0,0,0,177,178,5,96,0,0,178,42,1,0,0,0,179,180,3,
        59,29,0,180,44,1,0,0,0,181,182,3,73,36,0,182,183,5,45,0,0,183,184,
        3,75,37,0,184,185,5,45,0,0,185,186,3,77,38,0,186,46,1,0,0,0,187,
        188,3,63,31,0,188,189,3,63,31,0,189,190,5,58,0,0,190,191,3,63,31,
        0,191,192,3,63,31,0,192,48,1,0,0,0,193,200,3,55,27,0,194,199,3,55,
        27,0,195,199,3,57,28,0,196,199,3,63,31,0,197,199,5,95,0,0,198,194,
        1,0,0,0,198,195,1,0,0,0,198,196,1,0,0,0,198,197,1,0,0,0,199,202,
        1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,50,1,0,0,0,202,200,1,
        0,0,0,203,204,5,44,0,0,204,52,1,0,0,0,205,206,7,2,0,0,206,207,1,
        0,0,0,207,208,6,26,0,0,208,54,1,0,0,0,209,210,7,3,0,0,210,56,1,0,
        0,0,211,212,7,4,0,0,212,58,1,0,0,0,213,215,3,3,1,0,214,213,1,0,0,
        0,214,215,1,0,0,0,215,216,1,0,0,0,216,218,3,61,30,0,217,219,3,1,
        0,0,218,217,1,0,0,0,218,219,1,0,0,0,219,221,1,0,0,0,220,222,3,61,
        30,0,221,220,1,0,0,0,221,222,1,0,0,0,222,228,1,0,0,0,223,229,5,101,
        0,0,224,225,5,69,0,0,225,229,5,43,0,0,226,227,5,45,0,0,227,229,3,
        61,30,0,228,223,1,0,0,0,228,224,1,0,0,0,228,226,1,0,0,0,228,229,
        1,0,0,0,229,60,1,0,0,0,230,235,3,63,31,0,231,234,3,63,31,0,232,234,
        3,3,1,0,233,231,1,0,0,0,233,232,1,0,0,0,234,237,1,0,0,0,235,233,
        1,0,0,0,235,236,1,0,0,0,236,62,1,0,0,0,237,235,1,0,0,0,238,239,7,
        5,0,0,239,64,1,0,0,0,240,243,3,57,28,0,241,243,3,55,27,0,242,240,
        1,0,0,0,242,241,1,0,0,0,243,66,1,0,0,0,244,249,3,65,32,0,245,249,
        3,63,31,0,246,249,3,3,1,0,247,249,7,6,0,0,248,244,1,0,0,0,248,245,
        1,0,0,0,248,246,1,0,0,0,248,247,1,0,0,0,249,68,1,0,0,0,250,252,3,
        71,35,0,251,250,1,0,0,0,252,255,1,0,0,0,253,251,1,0,0,0,253,254,
        1,0,0,0,254,70,1,0,0,0,255,253,1,0,0,0,256,259,3,65,32,0,257,259,
        7,7,0,0,258,256,1,0,0,0,258,257,1,0,0,0,259,72,1,0,0,0,260,261,3,
        63,31,0,261,262,3,63,31,0,262,263,3,63,31,0,263,264,3,63,31,0,264,
        74,1,0,0,0,265,266,3,63,31,0,266,267,3,63,31,0,267,76,1,0,0,0,268,
        269,3,63,31,0,269,270,3,63,31,0,270,78,1,0,0,0,22,0,117,123,131,
        142,148,154,156,165,174,198,200,214,218,221,228,233,235,242,248,
        253,258,1,0,1,0
    ]

class dqql_grammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    DOT = 1
    UNDERSCORE = 2
    MINUS = 3
    LPAREN = 4
    RPAREN = 5
    EQ = 6
    IN = 7
    LT = 8
    GT = 9
    LE = 10
    GE = 11
    NEQ = 12
    ARROW = 13
    AND = 14
    OR = 15
    NOT = 16
    BOOL = 17
    REF = 18
    STR = 19
    INSTR = 20
    URI = 21
    NUMBER = 22
    DATE = 23
    TIME = 24
    NAME = 25
    SEP = 26
    SPACES = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'.'", "'_'", "'-'", "'('", "')'", "'=='", "'IN'", "'<'", "'>'", 
            "'<='", "'>='", "'!='", "'->'", "','" ]

    symbolicNames = [ "<INVALID>",
            "DOT", "UNDERSCORE", "MINUS", "LPAREN", "RPAREN", "EQ", "IN", 
            "LT", "GT", "LE", "GE", "NEQ", "ARROW", "AND", "OR", "NOT", 
            "BOOL", "REF", "STR", "INSTR", "URI", "NUMBER", "DATE", "TIME", 
            "NAME", "SEP", "SPACES" ]

    ruleNames = [ "DOT", "UNDERSCORE", "MINUS", "LPAREN", "RPAREN", "EQ", 
                  "IN", "LT", "GT", "LE", "GE", "NEQ", "ARROW", "AND", "OR", 
                  "NOT", "BOOL", "REF", "STR", "INSTR", "URI", "NUMBER", 
                  "DATE", "TIME", "NAME", "SEP", "SPACES", "ALPHALO", "ALPHAHI", 
                  "DECIMAL", "DIGITS", "DIGIT", "ALPHA", "REFCHAR", "UNIT", 
                  "UNITCHAR", "YEAR", "MONTH", "TODAY" ]

    grammarFileName = "dqql_grammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


